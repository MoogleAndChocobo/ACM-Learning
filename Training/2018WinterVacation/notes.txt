
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
基础专题
	1.题目:
		
	2.相关问题:快速幂/逆元/素数筛
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------



















---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
搜索专题
	1.题目:
		https://vjudge.net/contest/124260（喝茶补码番之一：简单搜索）
		https://vjudge.net/contest/208014（【1】搜索补充）
	2.相关问题:
		bfs/dfs/位运算/Dfs枚举/双向Dfs/搜索模拟/剪枝/next_permutation()/八皇后问题/输出路径/倒水问题/油田问题/迷宫问题/开关灯问题/贪心/素数筛/回溯法/高斯消元/字典序/状态转移/文件重定向输入输出/离散化
	3.待解决问题:
		(1)POJ 3414:Fire Game https://vjudge.net/contest/124260#problem/I
		(2)POJ 2718:Smallest Difference https://vjudge.net/contest/208014#problem/E
		(3)POJ 2558:Genetic Code https://vjudge.net/contest/208014#problem/C
		(4)POJ 1724:ROADS https://vjudge.net/contest/208014#problem/F
	4.待思考问题:
		(1)POJ 1321:棋盘问题 https://vjudge.net/contest/124260#problem/A
		(2)POJ 3279:Fliptile https://vjudge.net/contest/124260#problem/D
		(3)HDU 1495:非常可乐 https://vjudge.net/contest/124260#problem/M
		(4)FZU 2150:Fire Game https://vjudge.net/contest/124260#problem/I
	5.题解(帽子):(另附文档)
	6.思考:另附文档
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------















---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------
图论专题
	1.题目:
		https://vjudge.net/contest/124272(喝茶补码番之七:并查集)
		https://vjudge.net/contest/124264#overview(喝茶补码番之四:最小生成树)
	2.相关问题:
		并查集/最小生成树/prim/kruskal/路径压缩/状态压缩/离散化/拓扑排序算法/堆优化/队列优化/闭包传递/完全图/隐式图/
		


---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- ----------

一.树：用于表达层级结构的数据结构
	1.有根树：如果一棵树具有一个名为“根”（root)的特殊结点，那么这棵树称作有根树（rooted tree）。
		(1)根结点：唯一一个没有父结点的结点。
		(2)外部结点（external node）/叶结点（leaf）：没有子结点的结点。
		(3)内部结点（internal node）：除叶结点以外的结点。
		(4)度（degree）：有根树T中结点x的子结点数称为x的度，如果一个结点没有子结点，那么它的度为0。
		(5)深度（depth）：从根r到结点x的路径长度称为x的深度。
		(6)高（height）：结点x到叶结点的最大路径长度称为结点x的高。一棵树中根结点的高度最大，称其为树的高。
	2.有根树的表达：
		(1)左子右兄弟表示法（left-child right-sibling representation):结点u的父结点、结点u最左侧的子结点、结点u右侧紧邻的兄弟结点

	3.二叉树：如果一棵树拥有1个根结点，且所有结点的子结点数都不超过2，那么这棵树称为有根二叉树。在二叉树中，每个结点的子结点不超过两个，且子结点有左子结点和右子结点之分。也就是说，当某个结点只存在一个子结点时，要严格却分它是左子结点还是右子结点。这种子结点有特定顺序的树称为有序树。满足以下条件之一即为二叉树：（1）T没有任何结点；（2）T由以下三个不包含共通元素的顶点集合构成：a.根（root）；b.称为左子树（left subtree）的二叉树；（3）称为右子树（right subtree）的二叉树。
		(1)二叉树的表达：
			a.左子右兄弟表示法
		(2)二叉树的遍历：
			a.先序遍历/前序遍历（Preorder Tree Walk)：按照根结点、左子树、右子树的顺序输出结点编号；
			b.中序遍历（Inorder Tree Walk）：按照左子树、根结点、右子树的顺序输出结点编号；
			c.后序遍历（Postorder Tree Walk）：按照左子树、右子树、根结点的顺序输出结点编号；
			d.层次遍历：从上到下按层次访问该二叉树，每一层访问的顺序从左到右；
			(P.S.二叉树遍历会对树的每个结点进行一次访问，因此算法复杂度为O(n)，但使用递归时要注意，一旦树的结点数量庞大且分布不均，很可能导致递归深度过深)


二.图的基本概念和术语：
	1.图（graph）：
		(1)G=(V,E)，集合V中的元素称作顶点(vertex)或结点(node)；集合E中的元素分别对应于V中的某一对顶点(u,v)，表示它们之间存在某种关系，故亦称作边(edge)。一种直观显示图结构的方法是，用小圆圈或小方块代表顶点，用连接于期间的直线段或曲线弧表示对应的边。从计算的需求出发，我们约定V和E均为有限集，通常将其规模分别记n=|V|和e=|E|。

	2.无向图、有向图以及混合图：
		(1)无向边(undirected edge)、有向边(directed edge)，无向边(u,v)也可记作(v,u)，而有向的(u,v)和(v,u)则不可混淆。这里约定，有向边(u,v)从u指向v，其中u称作该边的起点(origin)或尾顶点(tail),而v称作该边的终点(destination)或头顶点(head).
		(2)无向图(undirected graph,简称undigraph)
		(3)有向图(directed graph,简称digraph)
		(4)混合图(mixed graph)
		P.S.相对而言,有向图的通用性更强,因为无向图和混合图都能转化为有向图

	3.度:
		(1)对于任何边e=(u,v),称顶点u和v彼此邻接(adjacent),而它们都与边e彼此关联.
		(2)对于无向图:与顶点v关联的变数,称作v的度数(degree),记作deg(v).
		(3)对于有向边e=(u,v),e称作u的出边(outgoing edge)和v的入边(incoming edge).v的出边总数称作其出度(out-degree),记作outdeg(v);入边总数称作其入度(in-degree),记作indeg(v).

	4.简单图:
		(1)联接与同一顶点之间的边,称作自环(self-loop),不含任何自环的图称作简单图(simple graph)

	5.连通图:
		(1)如果对于图G=(V,E)而言,任意两个顶点u和v都存在u到v的路径,那么G为连通图.
		(2)对于图G和图G1,如果G1的顶点集合与边集合皆为G的顶点集合与边集合的子集,那么G1就称为G的子图.

	6.通路与环路:
		(1)路径或通路(path),是由m+1个顶点与m条边交替而成的一个序列,其中沿途边的总数m,亦称作通路的长度,记作|π|=m.
			P.S.通路上的边必须互异,但顶点却可能重复,沿途顶点互异的通路,称作简单通路(simple path).
		(2)对于长度m≥1的通路π,若起止顶点相同(即v0=vm),则称作环路(cycle).
		(3)有向无环图(directed acyclic graph,DAG):不含任何环路的有向图.
		(4)简单环路(simple cycle):环路沿途除起止点以外所有顶点均互异.
		(5)欧拉环路(Eulerian tour):经过图中各边一次且恰好一次的环路,其长度恰好等于图中边的总数e.
		(6)哈密尔顿环路(Hamilton tour):经过图中各顶点一次且恰好一次的环路,其长度恰好等于构成环路的边数.

	7.带权网络:
		(1)权重(weight):例如wt(e)即为边(e)的权重.
		(2)带权图(weighted graph)/带权网络(weighted network):各边均带有权重的图,有时也简称网络(network),记作G(V,E,wt()).

	8.复杂度:
		(1)对于无向图:每一对顶点至多贡献一条边,故总共不超过n(n-1)/2条边,其上界由完全图达到.
		(2)对于有向图:每一对顶点都可能贡献(互逆的)两条边,因此至多可有n(n-1)条边.
		(3)必有e=O(n²).

	9.图的基本算法:
		(1)图最基本的算法是搜索,其中,图最具代表性的搜索算法是深度优先搜索(Depth First Search,DFS)和广度优先搜索(Breadth First Search,BFS),这两种算法对于无向图和有向图都适用.
			P.S.BFS常用作搜索求最短路径的一个算法.
	10.图的表示:
		(1)邻接表(Adjacent List)
		(2)邻接矩阵(Adjacent Matrices)
			优点:
				a.只需O(1)就可确定顶点u和顶点v的关系;
				b.对边的添加和删除,只需O(1),简单且高效.
			缺点:
				a.空间效率低,消耗的内存数等于顶点数的平方,如果图的边数较少,稀疏图(sparse graph),则会浪费大量的内存空间;
				b.一个邻接矩阵中,只能记录顶点u到顶点v的一个关系(一个基本型的二维数组中,无法在同一对顶点之间画出两条边).



三.并查集
	1.定义:
		并查集是一种树型的数据结构,用于处理一些不相交集合(Disjoint Sets)的合并及查询问题.
	2.操作方法:联合-查找算法(union-find algorithm)
		(1)Find:确定元素属于哪一个子集.
		(2)Union:将两个子集合并成同一个集合.
		P.S.一个不相交集也被称为联合-查找数据结构(union-find data structure)或合并-查找集合(merge-find set).
	3.模板优化:状态压缩(两种方式:递归和非递归)
	4.集合的表示:一种常用的策略是为每个集合选定一个固定的元素,称为代表,以表示整个集合.Find(x)返回x所属的集合代表,Union使用两个集合的代表作为参数.
	5.并查集森林???


四.最小生成树(Minimum Spanning Tree)
	1.定义:各边权值总和最小的生成树
	2.Prim's Algorithm && Dijkstra's Algorithm
	3.次小生成树
	4.最小生成树与简单搜索题结合
	(P.S.Prim求最大生成树)

五.最短路(Shortest Path Problem)
	1.单源最短路径(Single Source Path, SSSP):求给定顶点s到其他所有顶点之间的最短路径
	2.全点对间最短路径(All Pairs Shortest Path, APSP):每一对顶点间的最短路径)
	P.S.对于各边权值非负的加权图G=(V,E),如果顶点s到G的所有顶点都存在路径,那么一定存在一颗以s为根,包含s到G所有顶点最短路径的生成树T,这种树就称为最短路径的生成树(Shortest Path Spanning Tree).
	3.相关算法:
		(1)Dijkstra(堆优化版本的Dijkstra)
		(2)Bellman-Ford
		(3)SPFA
		(4)Floyd
	4.负环 边的松弛 差分约束系统
	




半线性结构

转二叉树的方法：左儿子右兄弟


已知一棵二叉树中序遍历和后序遍历，求其先序遍历/层次遍历


重边

混合图结点

度序列

欧拉路
关于欧拉路和欧拉回路的定理
汉密尔顿路
生成树的概念

边的松弛

二分图
二分图匹配问题
